name: Discord Release Notification
on:
  workflow_dispatch:

jobs:
  notify_discord:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get Latest Release
        id: get_latest_release
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install requests
          python3 - <<EOF
          import os
          import requests
          import json

          github_token = os.getenv('GITHUB_TOKEN')
          repo_owner = 'solankirishav21'
          repo_name = 'published_test'
          headers = {'Authorization': f'Bearer {github_token}'}
          url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/releases/latest'
          response = requests.get(url, headers=headers)
          data = response.json()
          tag = data.get('tag_name')
          description = data.get('body')
          print(f"::set-output name=tag::{tag}")
          print(f"::set-output name=description::{json.dumps(description)}")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare release message
        id: prepare_release_message
        run: |
          description="${{ steps.get_latest_release.outputs.description }}"
          escaped_description=$(echo "${description}" | awk '{gsub(/"/, "\\\""); print}')
  
          echo "::set-output name=escaped_description::$escaped_description"

      - name: Send release message to Discord
        run: |
          # Send the release message to Discord
          curl -X POST -H "Content-Type: application/json" -d "{
            \"content\": \"\",
            \"embeds\": [
              {
                \"title\": \"Release ${{ steps.get_latest_release.outputs.tag }}\",
                \"description\": \"${{ steps.prepare_release_message.outputs.escaped_description }}\"
              }
            ]
          }" ${{ secrets.DISCORD_WEBHOOK_URL }}
